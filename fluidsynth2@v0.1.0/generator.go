package fluidsynth2

// #cgo pkg-config: fluidsynth
// #include <fluidsynth.h>
// #include <stdlib.h>
import "C"

type FluidGenType int

const (
	GEN_STARTADDROFS FluidGenType = iota
	GEN_ENDADDROFS
	GEN_STARTLOOPADDROFS
	GEN_ENDLOOPADDROFS
	GEN_STARTADDRCOARSEOFS
	GEN_MODLFOTOPITCH
	GEN_VIBLFOTOPITCH
	GEN_MODENVTOPITCH
	GEN_FILTERFC
	GEN_FILTERQ
	GEN_MODLFOTOFILTERFC
	GEN_MODENVTOFILTERFC
	GEN_ENDADDRCOARSEOFS
	GEN_MODLFOTOVOL
	GEN_UNUSED1
	GEN_CHORUSSEND
	GEN_REVERBSEND
	GEN_PAN
	GEN_UNUSED2
	GEN_UNUSED3
	GEN_UNUSED4
	GEN_MODLFODELAY
	GEN_MODLFOFREQ
	GEN_VIBLFODELAY
	GEN_VIBLFOFREQ
	GEN_MODENVDELAY
	GEN_MODENVATTACK
	GEN_MODENVHOLD
	GEN_MODENVDECAY
	GEN_MODENVSUSTAIN
	GEN_MODENVRELEASE
	GEN_KEYTOMODENVHOLD
	GEN_KEYTOMODENVDECAY
	GEN_VOLENVDELAY
	GEN_VOLENVATTACK
	GEN_VOLENVHOLD
	GEN_VOLENVDECAY
	GEN_VOLENVSUSTAIN
	GEN_VOLENVRELEASE
	GEN_KEYTOVOLENVHOLD
	GEN_KEYTOVOLENVDECAY
	GEN_INSTRUMENT
	GEN_RESERVED1
	GEN_KEYRANGE
	GEN_VELRANGE
	GEN_STARTLOOPADDRCOARSEOFS
	GEN_KEYNUM
	GEN_VELOCITY
	GEN_ATTENUATION
	GEN_RESERVED2
	GEN_ENDLOOPADDRCOARSEOFS
	GEN_COARSETUNE
	GEN_FINETUNE
	GEN_SAMPLEID
	GEN_SAMPLEMODE
	GEN_RESERVED3
	GEN_SCALETUNE
	GEN_EXCLUSIVECLASS
	GEN_OVERRIDEROOTKEY
	GEN_PITCH
	GEN_CUSTOM_BALANCE
	GEN_CUSTOM_FILTERFC
	GEN_CUSTOM_FILTERQ
)

var FluidGenTypeMappings = map[FluidGenType]string{
	GEN_STARTADDROFS: "STARTADDROFS",
	GEN_ENDADDROFS: "ENDADDROFS",
	GEN_STARTLOOPADDROFS: "STARTLOOPADDROFS",
	GEN_ENDLOOPADDROFS: "ENDLOOPADDROFS",
	GEN_STARTADDRCOARSEOFS: "STARTADDRCOARSEOFS",
	GEN_MODLFOTOPITCH: "MODLFOTOPITCH",
	GEN_VIBLFOTOPITCH: "VIBLFOTOPITCH",
	GEN_MODENVTOPITCH: "MODENVTOPITCH",
	GEN_FILTERFC: "FILTERFC",
	GEN_FILTERQ: "FILTERQ",
	GEN_MODLFOTOFILTERFC: "MODLFOTOFILTERFC",
	GEN_MODENVTOFILTERFC: "MODENVTOFILTERFC",
	GEN_ENDADDRCOARSEOFS: "ENDADDRCOARSEOFS",
	GEN_MODLFOTOVOL: "MODLFOTOVOL",
	GEN_UNUSED1: "UNUSED1",
	GEN_CHORUSSEND: "CHORUSSEND",
	GEN_REVERBSEND: "REVERBSEND",
	GEN_PAN: "PAN",
	GEN_UNUSED2: "UNUSED2",
	GEN_UNUSED3: "UNUSED3",
	GEN_UNUSED4: "UNUSED4",
	GEN_MODLFODELAY: "MODLFODELAY",
	GEN_MODLFOFREQ: "MODLFOFREQ",
	GEN_VIBLFODELAY: "VIBLFODELAY",
	GEN_VIBLFOFREQ: "VIBLFOFREQ",
	GEN_MODENVDELAY: "MODENVDELAY",
	GEN_MODENVATTACK: "MODENVATTACK",
	GEN_MODENVHOLD: "MODENVHOLD",
	GEN_MODENVDECAY: "MODENVDECAY",
	GEN_MODENVSUSTAIN: "MODENVSUSTAIN",
	GEN_MODENVRELEASE: "MODENVRELEASE",
	GEN_KEYTOMODENVHOLD: "KEYTOMODENVHOLD",
	GEN_KEYTOMODENVDECAY: "KEYTOMODENVDECAY",
	GEN_VOLENVDELAY: "VOLENVDELAY",
	GEN_VOLENVATTACK: "VOLENVATTACK",
	GEN_VOLENVHOLD: "VOLENVHOLD",
	GEN_VOLENVDECAY: "VOLENVDECAY",
	GEN_VOLENVSUSTAIN: "VOLENVSUSTAIN",
	GEN_VOLENVRELEASE: "VOLENVRELEASE",
	GEN_KEYTOVOLENVHOLD: "KEYTOVOLENVHOLD",
	GEN_KEYTOVOLENVDECAY: "KEYTOVOLENVDECAY",
	GEN_INSTRUMENT: "INSTRUMENT",
	GEN_RESERVED1: "RESERVED1",
	GEN_KEYRANGE: "KEYRANGE",
	GEN_VELRANGE: "VELRANGE",
	GEN_STARTLOOPADDRCOARSEOFS: "STARTLOOPADDRCOARSEOFS",
	GEN_KEYNUM: "KEYNUM",
	GEN_VELOCITY: "VELOCITY",
	GEN_ATTENUATION: "ATTENUATION",
	GEN_RESERVED2: "RESERVED2",
	GEN_ENDLOOPADDRCOARSEOFS: "ENDLOOPADDRCOARSEOFS",
	GEN_COARSETUNE: "COARSETUNE",
	GEN_FINETUNE: "FINETUNE",
	GEN_SAMPLEID: "SAMPLEID",
	GEN_SAMPLEMODE: "SAMPLEMODE",
	GEN_RESERVED3: "RESERVED3",
	GEN_SCALETUNE: "SCALETUNE",
	GEN_EXCLUSIVECLASS: "EXCLUSIVECLASS",
	GEN_OVERRIDEROOTKEY: "OVERRIDEROOTKEY",
	GEN_PITCH: "PITCH",
	GEN_CUSTOM_BALANCE: "CUSTOM_BALANCE",
	GEN_CUSTOM_FILTERFC: "CUSTOM_FILTERFC",
	GEN_CUSTOM_FILTERQ: "CUSTOM_FILTERQ",
}

type Voice struct {
	ptr *C.fluid_voice_t
}

func (s *Synth) GetVoicelist() []Voice {
	bufSize := 100
	voices := make([]Voice, bufSize)
	var returned_voices []Voice
	C.fluid_synth_get_voicelist(s.ptr, &voices[0].ptr, C.int(bufSize), C.int(-1))
	for _, voice := range voices {
		if voice.ptr != nil {
			returned_voices = append(returned_voices, voice)
		}
	}
	return returned_voices
}

func (s *Synth) MidiGenSet(genType FluidGenType, val float64) {
	C.fluid_synth_set_gen(s.ptr, 0, C.int(genType), C.float(val))
}

func (s *Synth) MidiReverbSendSet(val float64) {
	C.fluid_synth_set_gen(s.ptr, 0, C.int(GEN_REVERBSEND), C.float(val))
}

func (s *Synth) MidiFilterCutoffSet(val float64) {
	C.fluid_synth_set_gen(s.ptr, 0, C.int(GEN_FILTERFC), C.float(val))
}

func (s *Synth) MidiFilterResoSet(val float64) {
	C.fluid_synth_set_gen(s.ptr, 0, C.int(GEN_FILTERQ), C.float(val))
}


func (v *Voice) VoiceGenSet(i FluidGenType, val float64) {
	C.fluid_voice_gen_set(v.ptr, C.int(i), C.float(val))
}

func (v *Voice) VoiceFilterCuttofSet(val float64) {
	C.fluid_voice_gen_set(v.ptr, C.int(GEN_FILTERFC), C.float(val))
}

func (v *Voice) VoiceFilterResSet(val float64) {
	C.fluid_voice_gen_set(v.ptr, C.int(GEN_FILTERQ), C.float(val))
}

func (v *Voice) VoiceReverbSendSet(val float64) {
	C.fluid_voice_gen_set(v.ptr, C.int(GEN_REVERBSEND), C.float(val))
	C.fluid_voice_update_param(v.ptr, C.int(GEN_REVERBSEND))
}
